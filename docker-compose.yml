version: '3.9'
services:
  # frontend:
  #   build: ./front-end
  #   ports:
  #     - 3000:3000
  #   platform: linux/x86_64
  #   working_dir: /app-frontend
  #   depends_on:
  #     backend:
  #       condition: service_healthy
  #   # Os `healthcheck` devem garantir que a aplicação
  #   # está operacional, antes de liberar o container
  #   healthcheck:
  #     test: ['CMD', 'lsof', '-t', '-i:3000'] # Caso utilize outra porta interna para o front, altere ela aqui também
  #     timeout: 10s
  #     retries: 5

  db:
    image: postgres:14
    container_name: vprm_db
    platform: linux/x86_64
    ports:
      - 5500:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=vprm_db
    restart: 'always'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"] # Deve aguardar o banco ficar operacional
      timeout: 10s
      retries: 5
    volumes:
      - data:/var/lib/postgresql/data # Volume para persistir dados
    cap_add:
      - SYS_NICE # Deve omitir alertas menores
    networks:
      - vprm-network
    
  backend:
    build: .  # Isso faz o Docker Compose usar o Dockerfile na raiz do projeto
    container_name: vprm_backend
    ports:
      - "4000:4000"
    depends_on:
      - db
    environment:
      - NODE_ENV=development
    volumes:
      - ./:/usr/src/app
      - ./.env:/usr/src/app/.env
    working_dir: /usr/src/app
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]  # Altere a URL para o endpoint correto do seu app
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - vprm-network

networks:
  vprm-network:
    driver: bridge  # Tipo de rede, "bridge" é a configuração padrão para comunicação entre containers

volumes:
  data: # Definindo o volume para persistir os dados entre reinícios